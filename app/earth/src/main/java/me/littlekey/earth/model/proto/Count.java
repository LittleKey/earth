// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: vitality.proto at 6:1
package me.littlekey.earth.model.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class Count extends Message<Count, Count.Builder> {
  public static final ProtoAdapter<Count> ADAPTER = new ProtoAdapter_Count();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_SCORE = 0;

  public static final Integer DEFAULT_TOTAL_WIN = 0;

  public static final Integer DEFAULT_TOTAL_PLAY = 0;

  public static final Integer DEFAULT_RANK = 0;

  public static final Integer DEFAULT_AVERAGE_SCORE = 0;

  public static final Integer DEFAULT_SCORE_OFFSET = 0;

  public static final Integer DEFAULT_CAPACITY = 0;

  public static final Integer DEFAULT_ORIGIN_SCORE = 0;

  public static final Integer DEFAULT_MAX_SCORE = 0;

  public static final Integer DEFAULT_SELECTED_NUM = 0;

  public static final Integer DEFAULT_UNREAD_MESSAGE = 0;

  public static final Long DEFAULT_START_TIME = 0L;

  public static final Long DEFAULT_END_TIME = 0L;

  public static final Long DEFAULT_TIME = 0L;

  public static final Integer DEFAULT_MEMBER_COUNT = 0;

  public static final Integer DEFAULT_READY_COUNT = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer score;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer total_win;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer total_play;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer rank;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer average_score;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer score_offset;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer capacity;

  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer origin_score;

  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer max_score;

  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer selected_num;

  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer unread_message;

  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long start_time;

  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long end_time;

  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long time;

  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer member_count;

  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer ready_count;

  public Count(Integer score, Integer total_win, Integer total_play, Integer rank, Integer average_score, Integer score_offset, Integer capacity, Integer origin_score, Integer max_score, Integer selected_num, Integer unread_message, Long start_time, Long end_time, Long time, Integer member_count, Integer ready_count) {
    this(score, total_win, total_play, rank, average_score, score_offset, capacity, origin_score, max_score, selected_num, unread_message, start_time, end_time, time, member_count, ready_count, ByteString.EMPTY);
  }

  public Count(Integer score, Integer total_win, Integer total_play, Integer rank, Integer average_score, Integer score_offset, Integer capacity, Integer origin_score, Integer max_score, Integer selected_num, Integer unread_message, Long start_time, Long end_time, Long time, Integer member_count, Integer ready_count, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.score = score;
    this.total_win = total_win;
    this.total_play = total_play;
    this.rank = rank;
    this.average_score = average_score;
    this.score_offset = score_offset;
    this.capacity = capacity;
    this.origin_score = origin_score;
    this.max_score = max_score;
    this.selected_num = selected_num;
    this.unread_message = unread_message;
    this.start_time = start_time;
    this.end_time = end_time;
    this.time = time;
    this.member_count = member_count;
    this.ready_count = ready_count;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.score = score;
    builder.total_win = total_win;
    builder.total_play = total_play;
    builder.rank = rank;
    builder.average_score = average_score;
    builder.score_offset = score_offset;
    builder.capacity = capacity;
    builder.origin_score = origin_score;
    builder.max_score = max_score;
    builder.selected_num = selected_num;
    builder.unread_message = unread_message;
    builder.start_time = start_time;
    builder.end_time = end_time;
    builder.time = time;
    builder.member_count = member_count;
    builder.ready_count = ready_count;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Count)) return false;
    Count o = (Count) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(score, o.score)
        && Internal.equals(total_win, o.total_win)
        && Internal.equals(total_play, o.total_play)
        && Internal.equals(rank, o.rank)
        && Internal.equals(average_score, o.average_score)
        && Internal.equals(score_offset, o.score_offset)
        && Internal.equals(capacity, o.capacity)
        && Internal.equals(origin_score, o.origin_score)
        && Internal.equals(max_score, o.max_score)
        && Internal.equals(selected_num, o.selected_num)
        && Internal.equals(unread_message, o.unread_message)
        && Internal.equals(start_time, o.start_time)
        && Internal.equals(end_time, o.end_time)
        && Internal.equals(time, o.time)
        && Internal.equals(member_count, o.member_count)
        && Internal.equals(ready_count, o.ready_count);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (score != null ? score.hashCode() : 0);
      result = result * 37 + (total_win != null ? total_win.hashCode() : 0);
      result = result * 37 + (total_play != null ? total_play.hashCode() : 0);
      result = result * 37 + (rank != null ? rank.hashCode() : 0);
      result = result * 37 + (average_score != null ? average_score.hashCode() : 0);
      result = result * 37 + (score_offset != null ? score_offset.hashCode() : 0);
      result = result * 37 + (capacity != null ? capacity.hashCode() : 0);
      result = result * 37 + (origin_score != null ? origin_score.hashCode() : 0);
      result = result * 37 + (max_score != null ? max_score.hashCode() : 0);
      result = result * 37 + (selected_num != null ? selected_num.hashCode() : 0);
      result = result * 37 + (unread_message != null ? unread_message.hashCode() : 0);
      result = result * 37 + (start_time != null ? start_time.hashCode() : 0);
      result = result * 37 + (end_time != null ? end_time.hashCode() : 0);
      result = result * 37 + (time != null ? time.hashCode() : 0);
      result = result * 37 + (member_count != null ? member_count.hashCode() : 0);
      result = result * 37 + (ready_count != null ? ready_count.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (score != null) builder.append(", score=").append(score);
    if (total_win != null) builder.append(", total_win=").append(total_win);
    if (total_play != null) builder.append(", total_play=").append(total_play);
    if (rank != null) builder.append(", rank=").append(rank);
    if (average_score != null) builder.append(", average_score=").append(average_score);
    if (score_offset != null) builder.append(", score_offset=").append(score_offset);
    if (capacity != null) builder.append(", capacity=").append(capacity);
    if (origin_score != null) builder.append(", origin_score=").append(origin_score);
    if (max_score != null) builder.append(", max_score=").append(max_score);
    if (selected_num != null) builder.append(", selected_num=").append(selected_num);
    if (unread_message != null) builder.append(", unread_message=").append(unread_message);
    if (start_time != null) builder.append(", start_time=").append(start_time);
    if (end_time != null) builder.append(", end_time=").append(end_time);
    if (time != null) builder.append(", time=").append(time);
    if (member_count != null) builder.append(", member_count=").append(member_count);
    if (ready_count != null) builder.append(", ready_count=").append(ready_count);
    return builder.replace(0, 2, "Count{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Count, Builder> {
    public Integer score;

    public Integer total_win;

    public Integer total_play;

    public Integer rank;

    public Integer average_score;

    public Integer score_offset;

    public Integer capacity;

    public Integer origin_score;

    public Integer max_score;

    public Integer selected_num;

    public Integer unread_message;

    public Long start_time;

    public Long end_time;

    public Long time;

    public Integer member_count;

    public Integer ready_count;

    public Builder() {
    }

    public Builder score(Integer score) {
      this.score = score;
      return this;
    }

    public Builder total_win(Integer total_win) {
      this.total_win = total_win;
      return this;
    }

    public Builder total_play(Integer total_play) {
      this.total_play = total_play;
      return this;
    }

    public Builder rank(Integer rank) {
      this.rank = rank;
      return this;
    }

    public Builder average_score(Integer average_score) {
      this.average_score = average_score;
      return this;
    }

    public Builder score_offset(Integer score_offset) {
      this.score_offset = score_offset;
      return this;
    }

    public Builder capacity(Integer capacity) {
      this.capacity = capacity;
      return this;
    }

    public Builder origin_score(Integer origin_score) {
      this.origin_score = origin_score;
      return this;
    }

    public Builder max_score(Integer max_score) {
      this.max_score = max_score;
      return this;
    }

    public Builder selected_num(Integer selected_num) {
      this.selected_num = selected_num;
      return this;
    }

    public Builder unread_message(Integer unread_message) {
      this.unread_message = unread_message;
      return this;
    }

    public Builder start_time(Long start_time) {
      this.start_time = start_time;
      return this;
    }

    public Builder end_time(Long end_time) {
      this.end_time = end_time;
      return this;
    }

    public Builder time(Long time) {
      this.time = time;
      return this;
    }

    public Builder member_count(Integer member_count) {
      this.member_count = member_count;
      return this;
    }

    public Builder ready_count(Integer ready_count) {
      this.ready_count = ready_count;
      return this;
    }

    @Override
    public Count build() {
      return new Count(score, total_win, total_play, rank, average_score, score_offset, capacity, origin_score, max_score, selected_num, unread_message, start_time, end_time, time, member_count, ready_count, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Count extends ProtoAdapter<Count> {
    ProtoAdapter_Count() {
      super(FieldEncoding.LENGTH_DELIMITED, Count.class);
    }

    @Override
    public int encodedSize(Count value) {
      return (value.score != null ? ProtoAdapter.UINT32.encodedSizeWithTag(1, value.score) : 0)
          + (value.total_win != null ? ProtoAdapter.UINT32.encodedSizeWithTag(2, value.total_win) : 0)
          + (value.total_play != null ? ProtoAdapter.UINT32.encodedSizeWithTag(3, value.total_play) : 0)
          + (value.rank != null ? ProtoAdapter.UINT32.encodedSizeWithTag(4, value.rank) : 0)
          + (value.average_score != null ? ProtoAdapter.UINT32.encodedSizeWithTag(5, value.average_score) : 0)
          + (value.score_offset != null ? ProtoAdapter.INT32.encodedSizeWithTag(6, value.score_offset) : 0)
          + (value.capacity != null ? ProtoAdapter.UINT32.encodedSizeWithTag(7, value.capacity) : 0)
          + (value.origin_score != null ? ProtoAdapter.UINT32.encodedSizeWithTag(8, value.origin_score) : 0)
          + (value.max_score != null ? ProtoAdapter.UINT32.encodedSizeWithTag(9, value.max_score) : 0)
          + (value.selected_num != null ? ProtoAdapter.UINT32.encodedSizeWithTag(10, value.selected_num) : 0)
          + (value.unread_message != null ? ProtoAdapter.UINT32.encodedSizeWithTag(11, value.unread_message) : 0)
          + (value.start_time != null ? ProtoAdapter.INT64.encodedSizeWithTag(12, value.start_time) : 0)
          + (value.end_time != null ? ProtoAdapter.INT64.encodedSizeWithTag(13, value.end_time) : 0)
          + (value.time != null ? ProtoAdapter.INT64.encodedSizeWithTag(14, value.time) : 0)
          + (value.member_count != null ? ProtoAdapter.UINT32.encodedSizeWithTag(15, value.member_count) : 0)
          + (value.ready_count != null ? ProtoAdapter.UINT32.encodedSizeWithTag(16, value.ready_count) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Count value) throws IOException {
      if (value.score != null) ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.score);
      if (value.total_win != null) ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.total_win);
      if (value.total_play != null) ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.total_play);
      if (value.rank != null) ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.rank);
      if (value.average_score != null) ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.average_score);
      if (value.score_offset != null) ProtoAdapter.INT32.encodeWithTag(writer, 6, value.score_offset);
      if (value.capacity != null) ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.capacity);
      if (value.origin_score != null) ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.origin_score);
      if (value.max_score != null) ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.max_score);
      if (value.selected_num != null) ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.selected_num);
      if (value.unread_message != null) ProtoAdapter.UINT32.encodeWithTag(writer, 11, value.unread_message);
      if (value.start_time != null) ProtoAdapter.INT64.encodeWithTag(writer, 12, value.start_time);
      if (value.end_time != null) ProtoAdapter.INT64.encodeWithTag(writer, 13, value.end_time);
      if (value.time != null) ProtoAdapter.INT64.encodeWithTag(writer, 14, value.time);
      if (value.member_count != null) ProtoAdapter.UINT32.encodeWithTag(writer, 15, value.member_count);
      if (value.ready_count != null) ProtoAdapter.UINT32.encodeWithTag(writer, 16, value.ready_count);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Count decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.score(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.total_win(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.total_play(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.rank(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.average_score(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.score_offset(ProtoAdapter.INT32.decode(reader)); break;
          case 7: builder.capacity(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.origin_score(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: builder.max_score(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.selected_num(ProtoAdapter.UINT32.decode(reader)); break;
          case 11: builder.unread_message(ProtoAdapter.UINT32.decode(reader)); break;
          case 12: builder.start_time(ProtoAdapter.INT64.decode(reader)); break;
          case 13: builder.end_time(ProtoAdapter.INT64.decode(reader)); break;
          case 14: builder.time(ProtoAdapter.INT64.decode(reader)); break;
          case 15: builder.member_count(ProtoAdapter.UINT32.decode(reader)); break;
          case 16: builder.ready_count(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Count redact(Count value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
