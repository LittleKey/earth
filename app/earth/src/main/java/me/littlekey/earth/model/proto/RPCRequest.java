// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: rpc.proto at 5:1
package me.littlekey.earth.model.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class RPCRequest extends Message<RPCRequest, RPCRequest.Builder> {
  public static final ProtoAdapter<RPCRequest> ADAPTER = new ProtoAdapter_RPCRequest();

  private static final long serialVersionUID = 0L;

  public static final ByteString DEFAULT_SESSION_ID = ByteString.EMPTY;

  public static final ByteString DEFAULT_CONTENT = ByteString.EMPTY;

  public static final Integer DEFAULT_VERSION = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString session_id;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString content;

  /**
   * EncryptMethod encrypt_method = 3;
   * bytes encrypt_IV = 4;
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer version;

  public RPCRequest(ByteString session_id, ByteString content, Integer version) {
    this(session_id, content, version, ByteString.EMPTY);
  }

  public RPCRequest(ByteString session_id, ByteString content, Integer version, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.session_id = session_id;
    this.content = content;
    this.version = version;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.session_id = session_id;
    builder.content = content;
    builder.version = version;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RPCRequest)) return false;
    RPCRequest o = (RPCRequest) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(session_id, o.session_id)
        && Internal.equals(content, o.content)
        && Internal.equals(version, o.version);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (session_id != null ? session_id.hashCode() : 0);
      result = result * 37 + (content != null ? content.hashCode() : 0);
      result = result * 37 + (version != null ? version.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (session_id != null) builder.append(", session_id=").append(session_id);
    if (content != null) builder.append(", content=").append(content);
    if (version != null) builder.append(", version=").append(version);
    return builder.replace(0, 2, "RPCRequest{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<RPCRequest, Builder> {
    public ByteString session_id;

    public ByteString content;

    public Integer version;

    public Builder() {
    }

    public Builder session_id(ByteString session_id) {
      this.session_id = session_id;
      return this;
    }

    public Builder content(ByteString content) {
      this.content = content;
      return this;
    }

    /**
     * EncryptMethod encrypt_method = 3;
     * bytes encrypt_IV = 4;
     */
    public Builder version(Integer version) {
      this.version = version;
      return this;
    }

    @Override
    public RPCRequest build() {
      return new RPCRequest(session_id, content, version, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RPCRequest extends ProtoAdapter<RPCRequest> {
    ProtoAdapter_RPCRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, RPCRequest.class);
    }

    @Override
    public int encodedSize(RPCRequest value) {
      return (value.session_id != null ? ProtoAdapter.BYTES.encodedSizeWithTag(1, value.session_id) : 0)
          + (value.content != null ? ProtoAdapter.BYTES.encodedSizeWithTag(2, value.content) : 0)
          + (value.version != null ? ProtoAdapter.UINT32.encodedSizeWithTag(3, value.version) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RPCRequest value) throws IOException {
      if (value.session_id != null) ProtoAdapter.BYTES.encodeWithTag(writer, 1, value.session_id);
      if (value.content != null) ProtoAdapter.BYTES.encodeWithTag(writer, 2, value.content);
      if (value.version != null) ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.version);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RPCRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.session_id(ProtoAdapter.BYTES.decode(reader)); break;
          case 2: builder.content(ProtoAdapter.BYTES.decode(reader)); break;
          case 3: builder.version(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RPCRequest redact(RPCRequest value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
