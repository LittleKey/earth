// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: common.proto at 15:1
package me.littlekey.earth.model.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class SaveData extends Message<SaveData, SaveData.Builder> {
  public static final ProtoAdapter<SaveData> ADAPTER = new ProtoAdapter_SaveData();

  private static final long serialVersionUID = 0L;

  public static final ByteString DEFAULT_CONTENT = ByteString.EMPTY;

  public static final Integer DEFAULT_CYCLE = 0;

  public static final ByteString DEFAULT_KEY = ByteString.EMPTY;

  public static final ByteString DEFAULT_SALT = ByteString.EMPTY;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString content;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer cycle;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString key;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString salt;

  public SaveData(ByteString content, Integer cycle, ByteString key, ByteString salt) {
    this(content, cycle, key, salt, ByteString.EMPTY);
  }

  public SaveData(ByteString content, Integer cycle, ByteString key, ByteString salt, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.content = content;
    this.cycle = cycle;
    this.key = key;
    this.salt = salt;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.content = content;
    builder.cycle = cycle;
    builder.key = key;
    builder.salt = salt;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SaveData)) return false;
    SaveData o = (SaveData) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(content, o.content)
        && Internal.equals(cycle, o.cycle)
        && Internal.equals(key, o.key)
        && Internal.equals(salt, o.salt);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (content != null ? content.hashCode() : 0);
      result = result * 37 + (cycle != null ? cycle.hashCode() : 0);
      result = result * 37 + (key != null ? key.hashCode() : 0);
      result = result * 37 + (salt != null ? salt.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (content != null) builder.append(", content=").append(content);
    if (cycle != null) builder.append(", cycle=").append(cycle);
    if (key != null) builder.append(", key=").append(key);
    if (salt != null) builder.append(", salt=").append(salt);
    return builder.replace(0, 2, "SaveData{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<SaveData, Builder> {
    public ByteString content;

    public Integer cycle;

    public ByteString key;

    public ByteString salt;

    public Builder() {
    }

    public Builder content(ByteString content) {
      this.content = content;
      return this;
    }

    public Builder cycle(Integer cycle) {
      this.cycle = cycle;
      return this;
    }

    public Builder key(ByteString key) {
      this.key = key;
      return this;
    }

    public Builder salt(ByteString salt) {
      this.salt = salt;
      return this;
    }

    @Override
    public SaveData build() {
      return new SaveData(content, cycle, key, salt, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_SaveData extends ProtoAdapter<SaveData> {
    ProtoAdapter_SaveData() {
      super(FieldEncoding.LENGTH_DELIMITED, SaveData.class);
    }

    @Override
    public int encodedSize(SaveData value) {
      return (value.content != null ? ProtoAdapter.BYTES.encodedSizeWithTag(1, value.content) : 0)
          + (value.cycle != null ? ProtoAdapter.INT32.encodedSizeWithTag(2, value.cycle) : 0)
          + (value.key != null ? ProtoAdapter.BYTES.encodedSizeWithTag(3, value.key) : 0)
          + (value.salt != null ? ProtoAdapter.BYTES.encodedSizeWithTag(4, value.salt) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, SaveData value) throws IOException {
      if (value.content != null) ProtoAdapter.BYTES.encodeWithTag(writer, 1, value.content);
      if (value.cycle != null) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.cycle);
      if (value.key != null) ProtoAdapter.BYTES.encodeWithTag(writer, 3, value.key);
      if (value.salt != null) ProtoAdapter.BYTES.encodeWithTag(writer, 4, value.salt);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public SaveData decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.content(ProtoAdapter.BYTES.decode(reader)); break;
          case 2: builder.cycle(ProtoAdapter.INT32.decode(reader)); break;
          case 3: builder.key(ProtoAdapter.BYTES.decode(reader)); break;
          case 4: builder.salt(ProtoAdapter.BYTES.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public SaveData redact(SaveData value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
