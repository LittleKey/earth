// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ehentai/model.proto at 32:1
package me.littlekey.earth.model.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class Tag extends Message<Tag, Tag.Builder> {
  public static final ProtoAdapter<Tag> ADAPTER = new ProtoAdapter_Tag();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ID = "";

  public static final String DEFAULT_KEY = "";

  public static final String DEFAULT_URL = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String id;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String key;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String url;

  @WireField(
      tag = 4,
      adapter = "me.littlekey.earth.model.proto.Tag#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Tag> values;

  public Tag(String id, String key, String url, List<Tag> values) {
    this(id, key, url, values, ByteString.EMPTY);
  }

  public Tag(String id, String key, String url, List<Tag> values, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.key = key;
    this.url = url;
    this.values = Internal.immutableCopyOf("values", values);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.key = key;
    builder.url = url;
    builder.values = Internal.copyOf("values", values);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Tag)) return false;
    Tag o = (Tag) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(key, o.key)
        && Internal.equals(url, o.url)
        && values.equals(o.values);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (key != null ? key.hashCode() : 0);
      result = result * 37 + (url != null ? url.hashCode() : 0);
      result = result * 37 + values.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (key != null) builder.append(", key=").append(key);
    if (url != null) builder.append(", url=").append(url);
    if (!values.isEmpty()) builder.append(", values=").append(values);
    return builder.replace(0, 2, "Tag{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Tag, Builder> {
    public String id;

    public String key;

    public String url;

    public List<Tag> values;

    public Builder() {
      values = Internal.newMutableList();
    }

    public Builder id(String id) {
      this.id = id;
      return this;
    }

    public Builder key(String key) {
      this.key = key;
      return this;
    }

    public Builder url(String url) {
      this.url = url;
      return this;
    }

    public Builder values(List<Tag> values) {
      Internal.checkElementsNotNull(values);
      this.values = values;
      return this;
    }

    @Override
    public Tag build() {
      return new Tag(id, key, url, values, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Tag extends ProtoAdapter<Tag> {
    ProtoAdapter_Tag() {
      super(FieldEncoding.LENGTH_DELIMITED, Tag.class);
    }

    @Override
    public int encodedSize(Tag value) {
      return (value.id != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.id) : 0)
          + (value.key != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.key) : 0)
          + (value.url != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.url) : 0)
          + Tag.ADAPTER.asRepeated().encodedSizeWithTag(4, value.values)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Tag value) throws IOException {
      if (value.id != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.id);
      if (value.key != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.key);
      if (value.url != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.url);
      Tag.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.values);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Tag decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.key(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.url(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.values.add(Tag.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Tag redact(Tag value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.values, Tag.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
