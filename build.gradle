// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

int[] sdksAvailable() {
    def sdks = new ByteArrayOutputStream()
    def androidSdkDir = androidSDKDir()
    exec {
        workingDir androidSdkDir + "/tools"
        commandLine './android', 'list'
        standardOutput = sdks
    }
    sdks = sdks
    // get the output
        .toString()
    //split to strings
        .split('\n')
    // leave only strings with API levels
        .findAll { it ==~ /\s*API level:\s*(\d+).*/ }
    // extract the API levels
            .collect { (it =~ /\s*API level:\s*(\d+).*/)[0][1].toInteger() }
    // sort from highest to lowest
            .sort({ a, b -> b <=> a })
    sdks
}

int getSdkVersion(int defaultSdk) {
    try {
        def sdks = sdksAvailable()
        if (sdks.contains(defaultSdk)) {
            println "Use default SDK " + defaultSdk
            defaultSdk
        } else {
            println "Default SDK not found, use highest found SDK " + sdks[0]
            sdks[0]
        }
    } catch (any) {
        println "Exception while determining highest SDK. Using default SDK " +
                defaultSdk
        StackTraceUtils.sanitize(any).printStackTrace()
        defaultSdk
    }
}

String androidSDKDir() {
    def androidExecPath = new ByteArrayOutputStream()
    try {
        exec {
            commandLine 'which', 'android'
            standardOutput = androidExecPath
        }
        println "find android exec path: " + androidExecPath.toString()
        file(androidExecPath.toString().trim()).getParentFile().getParentFile()
    } catch (ExecException) {
        exec {
            commandLine 'grep', 'sdk.dir', 'local.properties'
            standardOutput = androidExecPath
        }
        println "find android sdk with local.properties: " + androidExecPath.toString()
        file(androidExecPath.toString().trim().split('=')[1])
    }
}

String[] buildToolsAvailable() {
    println "sdk dir: " + androidSDKDir()
    def buildToolsDir = new File(androidSDKDir(), "build-tools")
    buildToolsDir.list([accept: { d, f -> !f.contains("android") }] as FilenameFilter).sort { a, b -> b <=> a }
}

String getBuildToolsVersion(String defaultBuildTools) {
    try {
        def buildToolsVersions = buildToolsAvailable()
        if (buildToolsVersions.contains(defaultBuildTools)) {
            println "Use default build tools " + defaultBuildTools
            defaultBuildTools.replace('_', ' ')
        } else {
            println "Default build tools not found, use highest found build tools " +
                    buildToolsVersions[0]
            buildToolsVersions[0].replace('_', ' ')
        }
    } catch (any) {
        println "Exception while determining latest build tools. Using default build tools " +
                defaultBuildTools
        StackTraceUtils.sanitize(any).printStackTrace()
        defaultBuildTools.replace('_', ' ')
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

ext {
    compileSdkVersion = 25
    buildToolsVersion = "25"
    targetSdkVersion = 25
    supportLibraryVersion = "25.0.0"

    jsoupVersion = "1.10.1"
    junitVersion = "4.12"
    robolectricVersion = "3.1.2"
    timberVersion = "3.1.0"
    eventbusVersion = "2.4.0"
    gsonVersion = "2.4"
    frescoVersion = "0.14.1"
    okhttpVersion = "3.4.1"
    imagepipelineOkhttp3Version = "0.14.1"
    wireRuntimeVersion = "2.2.0"

    //ext.storeFile = new File(rootDir, (String) properties.get("store.dir"))
    //ext.storePassword = properties.get("store.password")
    //ext.aliasName = properties.get("alias.name")
    //ext.aliasPassword = properties.get("alias.password")
}